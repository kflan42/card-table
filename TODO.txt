Bugs:

 - need to support new rolling URLs for card data https://scryfall.com/blog/category/api
 - card moves can result in lost or duplicates sometimes
   - hardening move logic against bad moves
   - maybe js actions / events from old game got resolved and sent with new game name. 
   - I've seen actions sent after refresh, need game set earlier in js and server to enforce they're for the right game

User Feature Requests:
 - i to identify set / number
 - replay mode to review what happened? (season scoring reference)
 - [] build options form for playerPrefs (non-game)
   - [] adjustable card size: bf & hand.
   - [] higher quality card image option
   - [] adjustable log width
 - [] image url for playmat (avoid hosting user images)
 - delete token on graveyard drop
 - [] list games on login screen?

My ideas:
 - remove limit on log lines, but need virtual scroll trick to avoid too many elements
 - prompt to confirm (or hold shift to enable) acting on other player's things
 - end turn button (output a log line for clarity)
 - post-game stats screen, show count and types of actions
 - undo as a server side operation: delete last action & force reload (join can use same force reload)

Long term:
 - move reducer game update logic to server, just send updated objects to client
   - do random property based testing on it
   - ensure all clients seeing same game, enforce ordering of action resolutions
 - use redis as a pubsub on the backend. Need to figure out how to connect from flaskIO to it.
   - have 1 redis consumer per game applying updates then sending new zone states out rooms (tables)
   - flask / socketio will deal with clients connecting and validating, then pass the message on
 - figure out horizontal scaling
   - socket.io needs to use a message queue or be single process to send / broadcast correctly
   - one page says gunicorn --workers 1 but gunicorn lacks sticky sessions so breaks socket.io
   - multiple single-process servers with sticky sessions, and a redis message queue backend
   - gonna need these
     - https://cloud.google.com/appengine/docs/standard/python3/quickstart
     - https://cloud.google.com/appengine/docs/flexible/go/using-websockets-and-session-affinity

Longer term:
 - planes walkers with default loyalty counter (need more SF data)
